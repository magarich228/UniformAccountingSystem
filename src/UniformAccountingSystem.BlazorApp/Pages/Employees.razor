@page "/employees"
@using System.ComponentModel.DataAnnotations;
@using UniformAccountingSystem.BLL.Dtos
@using UniformAccountingSystem.BLL.Abstractions;
@inject IEmployeesManager EmployeeManager

<PageTitle>Сотрудники</PageTitle>

<h1>Сотрудники</h1>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="page-controls">
        <button class="btn btn-outline-dark" @onclick="OnAdd">
            Добавить
        </button>
        <div class="form-check">
            <label class="form-label">Уволенные</label>
            <input class="form-check-input" type="checkbox" @onclick="OnGetDiscardsEmployeesClickAsync"/>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Отчество</th>
                <th>Должность</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr class="tr-functions @newEmpClass">
                <td><input @bind-value="newEmployee.FirstName" /></td>
                <td><input @bind-value="newEmployee.LastName" /></td>
                <td><input @bind-value="newEmployee.Patronymic" /></td>
                <td><input @bind-value="newEmployee.WorkPosition" /></td>
                <td>
                    <button class="btn btn-outline-dark btn-sm" @onclick="OnAddNewEmployeeSubmitAsync">
                        Сохранить
                    </button>
                    <button class="btn btn-outline-dark btn-sm" @onclick="OnAddingCancel">
                        Отменить
                    </button>
                </td>
                <td></td>
            </tr>
            @foreach (var employee in employees)
            {
                <tr class="tr-functions">
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Patronymic</td>
                    <td>@employee.WorkPosition</td>
                    <td>
                        <button class="btn btn-outline-dark btn-sm hidden">
                            Редактировать
                        </button>
                        <button class="btn btn-outline-dark btn-sm hidden" @onclick="OnDiscardAsync">
                            Уволить
                        </button>
                    </td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private EmployeeDto[]? employees;
    private bool allEmployees = false;

    private EmployeeDto newEmployee = new ();
    private string newEmpClass = "new-emp-hide";

    protected override async Task OnInitializedAsync()
    {
        await SetEmployeesAsync();
    }

    private async Task SetEmployeesAsync()
    {
        employees = (await EmployeeManager.GetAllAsync()).ToArray();
    }

    private async Task OnGetDiscardsEmployeesClickAsync()
    {
        allEmployees = !allEmployees;

        employees = (await EmployeeManager.GetAllAsync(allEmployees)).ToArray();
    }

    private void OnAdd()
    {
        newEmpClass = "new-emp";
    }

    private void OnAddingCancel()
    {
        newEmployee = new();
        newEmpClass = "new-emp-hide";
    }

    private async Task OnAddNewEmployeeSubmitAsync()
    {
        ValidationContext context = new (newEmployee);
        List<ValidationResult> results = new();

        if (!Validator.TryValidateObject(newEmployee, context, results, true))
        {
            foreach (var error in results)
            {
                Console.WriteLine(error.ErrorMessage);
            }
        }

        await EmployeeManager.AddAsync(newEmployee);

        newEmployee = new();
        newEmpClass = "new-emp-hide";

        await SetEmployeesAsync();
    }

    private async Task OnDiscardAsync()
    {
        
    }
}
