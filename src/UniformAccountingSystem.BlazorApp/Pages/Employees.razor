@page "/employees"
@using System.ComponentModel.DataAnnotations;
@using System.Text;
@using UniformAccountingSystem.BLL.Dtos
@using UniformAccountingSystem.BLL.Abstractions;
@inject IEmployeesManager EmployeeManager
@inject IJSRuntime JSRuntime

<PageTitle>Сотрудники</PageTitle>

<h1>Сотрудники</h1>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="page-controls">
        <button class="btn btn-outline-dark" @onclick="OnAdd">
            Добавить
        </button>
        <div class="form-check">
            <label class="form-label">Уволенные</label>
            <input class="form-check-input" type="checkbox" @onclick="OnGetDiscardsEmployeesClickAsync" />
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Отчество</th>
                <th>Должность</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr class="tr-functions @newEmpClass">
                <td><input @bind-value="newEmployee.FirstName" /></td>
                <td><input @bind-value="newEmployee.LastName" /></td>
                <td><input @bind-value="newEmployee.Patronymic" /></td>
                <td><input @bind-value="newEmployee.WorkPosition" /></td>
                <td>
                    <button class="btn btn-outline-dark btn-sm" @onclick="OnAddNewEmployeeSubmitAsync">
                        Сохранить
                    </button>
                    <button class="btn btn-outline-dark btn-sm" @onclick="OnAddingCancel">
                        Отменить
                    </button>
                </td>
                <td></td>
            </tr>
            @foreach (var employee in employees)
            {
                @if (!employeesEdit.First(e => e.empId == employee.Id).edit)
                {
                    <tr class="tr-functions">
                        <td>@employee.FirstName</td>
                        <td>@employee.LastName</td>
                        <td>@employee.Patronymic</td>
                        <td>@employee.WorkPosition</td>
                        <td>
                            <button class="btn btn-outline-dark btn-sm hidden" @onclick="@(() => ToEditAsync(employee.Id, true))">
                                Редактировать
                            </button>
                            <button class="btn btn-outline-dark btn-sm hidden" @onclick="@(() => DiscardAsync(@employee))">
                                @(employee.State == EmployeeState.Active ? "Уволить" : "Вернуть")
                            </button>
                        </td>
                        <td></td>
                    </tr>
                }
                else
                {
                    <tr class="tr-functions">
                        <td><input @bind-value=employee.FirstName /></td>
                        <td><input @bind-value=employee.LastName /></td>
                        <td><input @bind-value=employee.Patronymic /></td>
                        <td><input @bind-value=employee.WorkPosition /></td>
                        <td>
                            <button class="btn btn-outline-dark btn-sm hidden" @onclick="@(() => ToEditAsync(employee.Id, false))">
                                Отменить
                            </button>
                            <button class="btn btn-outline-dark btn-sm hidden" @onclick="@(() => SaveEditEmployeeAsync(employee))">
                                Сохранить
                            </button>
                        </td>
                        <td></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private EmployeeDto[]? employees;
    private bool allEmployees = false;

    private List<(bool edit, Guid empId)> employeesEdit = new List<(bool edit, Guid empId)>();

    private EmployeeDto newEmployee = new();
    private string newEmpClass = "new-emp-hide";

    protected override async Task OnInitializedAsync()
    {
        await SetEmployeesAsync();
    }

    private async Task SetEmployeesAsync()
    {
        employees = (await EmployeeManager.GetAllAsync()).ToArray();

        SetEmployeesEdit();
    }

    private async Task OnGetDiscardsEmployeesClickAsync()
    {
        allEmployees = !allEmployees;

        employees = (await EmployeeManager.GetAllAsync(allEmployees)).ToArray();

        SetEmployeesEdit();
    }

    private void SetEmployeesEdit()
    {
        List<(bool edit, Guid empId)> employeesEdit = new();

        foreach (var emp in employees!)
        {
            var edit = this.employeesEdit.FirstOrDefault(e => e.empId == emp.Id);

            employeesEdit.Add((edit != default ? edit.edit : false, emp.Id));
        }

        this.employeesEdit = employeesEdit;
    }

    private void OnAdd()
    {
        newEmpClass = "new-emp";
    }

    private void OnAddingCancel()
    {
        newEmployee = new();
        newEmpClass = "new-emp-hide";
    }

    private async Task OnAddNewEmployeeSubmitAsync()
    {
        if (!await ValidateEmployeeAsync(newEmployee))
            return;

        await EmployeeManager.AddAsync(newEmployee);

        newEmployee = new();
        newEmpClass = "new-emp-hide";

        await SetEmployeesAsync();
    }

    private async Task DiscardAsync(EmployeeDto employee)
    {
        await EmployeeManager.ChangeStateByIdAsync(employee.Id);
        await SetEmployeesAsync();
    }

    private async Task ToEditAsync(Guid employeeId, bool isEdit)
    {
        await SetEmployeesAsync();

        var edit = employeesEdit.Find(e => e.empId == employeeId);
        employeesEdit.Remove(edit);
        employeesEdit.Add((isEdit, employeeId));

        employeesEdit.ForEach(e => Console.WriteLine(e.edit));
    }

    private async Task SaveEditEmployeeAsync(EmployeeDto employee)
    {
        if (!await ValidateEmployeeAsync(employee))
            return;

        await EmployeeManager.UpdateInfoAsync(employee);
        await ToEditAsync(employee.Id, false);
    }

    private async Task<bool> ValidateEmployeeAsync(EmployeeDto employee)
    {
        ValidationContext context = new(employee);
        List<ValidationResult> results = new();

        if (!Validator.TryValidateObject(employee, context, results, true))
        {
            StringBuilder sb = new();

            foreach (var error in results)
            {
                sb.AppendLine(error.ErrorMessage);
            }

            await JSRuntime.InvokeVoidAsync("ShowErrors", sb.ToString());
            return false;
        }

        return true;
    }
}
